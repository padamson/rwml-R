---
title: "Real-World Machine Learning"
subtitle: "Chapter 6"
author: "Paul Adamson"
date: "Aug 18, 2022"
format:
  html:
    toc: true
---

This notebook contains R code to accompany Chapter 6 of the book 
["Real-World Machine Learning"](https://www.manning.com/books/real-world-machine-learning),
by  Henrik Brink, Joseph W. Richards, and Mark Fetherolf.  The code was 
contributed by [Paul Adamson](http://github.com/padamson). 

*REMINDER: update `project_dir` below to execute code as interactive code cells*

```{r setup, include=FALSE}
set.seed(1111)
library(knitr)
project_dir <- file.path(Sys.getenv("HOME"), "projects/github-padamson/rwml-R")
setwd(file.path(project_dir, "R"))
knitr::opts_chunk$set(echo = TRUE)
library(data.table)
library(plyr)
library(dplyr)
library(ggplot2)
library(gridExtra)
library(caret)
library(stepPlr)
library(e1071)
library(ranger)
library(formatR)
library(languageserver)

# Set table theme to allow for plotmath expressions
tt <- ttheme_default(colhead=list(fg_params = list(parse=TRUE)))
```

### Data for NYC taxi example

The data files for the examples in this chapter are available at 
[https://archive.org/download/nycTaxiTripData2013/](https://archive.org/download/nycTaxiTripData2013/).
Specifically, download the following files and put them in the folder `proprietary_data`:

- [https://archive.org/download/nycTaxiTripData2013/trip_data.7z](https://archive.org/download/nycTaxiTripData2013/)
- [https://archive.org/download/nycTaxiTripData2013/trip_fare.7z](https://archive.org/download/nycTaxiTripData2013/)

The data files are compressed as a 7-Zip file archive 
(e.g. with [p7zip](http://p7zip.sourceforge.net)), so you will
need to use the `7z` program to unzip the files.
On a mac, you can use [Homebrew](https://brew.sh) to install p7zip 
(`brew install p7zip`) then execute the commands `7z x trip_data.7z` and `7z x trip_fare.7z`
in the `proprietary_data` folder.

```{r unzipData, cache=FALSE}
tripFile <- "trip_data.7z"
data_dir <- file.path(getwd(), "../proprietary_data")
localTripFile <- file.path(data_dir, tripFile)
tripFile1 <- file.path(data_dir, "trip_data_1.csv")
fareFile <- "trip_fare.7z"
localFareFile <- paste0(data_dir, fareFile)
fareFile1 <- file.path(data_dir, "trip_fare_1.csv")
```

```{r loadAndJoinData, cache=TRUE}
npoints <- 50000
tripData <- fread(tripFile1, nrows=npoints, stringsAsFactors = TRUE) %>%
  mutate(store_and_fwd_flag = 
           replace(store_and_fwd_flag, which(store_and_fwd_flag == ""), "N")) %>%
  filter(trip_distance > 0 & trip_time_in_secs > 0 & passenger_count > 0) %>%
  filter(pickup_longitude < -70 & pickup_longitude > -80) %>%
  filter(pickup_latitude > 0 & pickup_latitude < 41) %>%
  filter(dropoff_longitude < 0 & dropoff_latitude > 0)
tripData$store_and_fwd_flag <- factor(tripData$store_and_fwd_flag)
fareData <- fread(fareFile1, nrows=npoints, stringsAsFactors = TRUE)
dataJoined <- inner_join(tripData, fareData)
remove(fareData, tripData)
```

### Figure 6.1 The first six rows of the NYC taxi trip and fare record data

```{r figure6.1, cache=TRUE, dependson="loadAndJoinData"}
tableRows <- 6
kable(head(dataJoined[,1:5],tableRows))
kable(head(dataJoined[,6:10],tableRows))
kable(head(dataJoined[,11:15],tableRows))
kable(head(dataJoined[,16:21],tableRows))
```

### Figure 6.2 The distribution of values across some of the categorical-looking columns in our dataset

```{r figure6.2, cache=TRUE, dependson="loadAndJoinData"}
p1 <- ggplot(dataJoined, aes(vendor_id)) +
  geom_bar()
p2 <- ggplot(dataJoined, aes(rate_code)) +
  geom_bar()
p3 <- ggplot(dataJoined, aes(store_and_fwd_flag)) +
  geom_bar()
p4 <- ggplot(dataJoined, aes(payment_type)) +
  geom_bar()
grid.arrange(p1,p2,p3,p4,nrow=2)
```


### Figure 6.3 Scatter plots of taxi trips for the time in seconds versus the trip distance, and the time in seconds versus the trip amount (USD), respectively.

```{r figure6.3, eval=TRUE, cache=TRUE, dependson="loadAndJoinData"}
p5 <- ggplot(dataJoined, aes(trip_time_in_secs, trip_distance)) +
  geom_point(alpha = 0.1)
p6 <- ggplot(dataJoined, aes(trip_time_in_secs, total_amount)) +
  geom_point(alpha = 0.1)
grid.arrange(p5,p6,nrow=2)
```

### Figure 6.4 The latitude/longitude of pickup locations. Note that the x-axis is flipped, compared to a regular map.

```{r figure6.4, eval=TRUE, cache=TRUE, dependson="loadAndJoinData"}
p7 <- ggplot(dataJoined, aes(pickup_latitude, pickup_longitude)) +
  geom_point(shape = ".") +
  scale_x_continuous(limits = c(40.6, 40.9)) +
  scale_y_continuous(limits = c(-74.04, -73.90))
p7
```

### Figure 6.5 The distribution of tip amount. 

```{r figure6.5, eval=TRUE, cache=TRUE, dependson="loadAndJoinData"}
p8 <- ggplot(dataJoined, aes(tip_amount)) +
  geom_histogram() +
  scale_x_continuous(limits = c(-1, 16.0), name = "Tip amount (USD)") +
  scale_y_continuous(name = "Count")
p8
```

### Figure 6.6 The distribution of tip amounts when omitting cash payments

```{r figure6.6, eval=TRUE, cache=TRUE, dependson="loadAndJoinData"}
dataJoined <- dataJoined %>%
  filter(payment_type != "CSH")
p9 <- ggplot(dataJoined, aes(tip_amount)) +
  geom_histogram() +
  scale_x_continuous(limits = c(-1, 16.0), name = "Tip amount (USD)") +
  scale_y_continuous(name = "Count")
p9
```

### Functions to plot a ROC curve from Chapter 4

```{r echo=TRUE, cache=FALSE}
chapter4listings_file <- file.path(getwd(), "chapter4listings.R")
knitr::read_chunk(chapter4listings_file)
```

```{r listing4.3, echo=TRUE}
```

```{r listing4.4, echo=TRUE}
```

```{r plotROC, eval=TRUE, cache=TRUE, dependson="listing4.3"}
plotROC <- function(trueLabels, predictedProbs, nPoints=100, posClass=1){
  auc <- auc(trueLabels, predictedProbs, nPoints=100, posClass=1)
  df <- rocCurve(trueLabels = trueLabels,
                 predictedProbs = predictedProbs,
                 nPoints = nPoints,
                 posClass = posClass)
  ggplot(df,aes(x=fpr,y=tpr)) +
    geom_abline(slope=1, intercept = 0,
                colour = "green") + #we've added the line for random baseline for reference
    geom_step(direction="vh", colour="blue") +
    scale_x_continuous(limits = c(0,1)) +
    scale_y_continuous(limits = c(0,1)) +
    labs(x = "False-positive rate",
         y = "True-positive rate") +
    annotate("text", x=.6, y=.2,
             label=paste0("Area under the curve (AUC) = ",
                          round(auc,digits = 2)))
}
```

### Listing 6.1 Logistic regression tip-prediction model


```{r listing6.1a, eval=TRUE, cache=TRUE, dependson="figure6.6"}
numericalData <- dataJoined[,c(8:14,16:18,20)]
numericalData <- numericalData[ , passenger_count := as.numeric(passenger_count)]
numericalData <- numericalData[ , trip_time_in_secs := as.numeric(trip_time_in_secs)]
```

```{r, fig.width=8, fig.height=8}
featurePlot(x = numericalData[, -1], 
            y = numericalData$tipped, 
            plot = "pairs",
            auto.key = list(columns = 3))
```

```{r}
cols <- colnames(numericalData)
numericalData[, (cols) := lapply(.SD, function(x) as.vector(scale(x))), .SDcols = cols]
```


```{r}
numericalData$tipped <- as.factor(c(dataJoined$tip_amount > 0))
levels(numericalData$tipped) <- c("false", "true")
trainIndex <- createDataPartition(numericalData$tipped, p = .8, 
                                  list = FALSE, 
                                  times = 1)

numericalDataTrain <- numericalData[ trainIndex,]
numericalDataTest <- numericalData[-trainIndex,]

```

```{r}
fitControl <- trainControl(method = "repeatedcv", 
                           number = 10, 
                           savePredictions = TRUE,
                           summaryFunction=twoClassSummary, 
                           classProbs=TRUE)

```

```{r}
plrFit <- train(tipped ~ ., data = numericalDataTrain,
                method = "plr",
                trControl = fitControl) 
```

### Figure 6.7 The receiver operating characteristic (ROC) curve of the logistic regression tip/no-tip classifier. 

```{r figure6.7, eval=TRUE, cache=TRUE, dependson="listing6.1, plotROC"}
plrPredProb <- predict(object=plrFit, 
                       numericalDataTest, type='prob')
plotROC(revalue(numericalDataTest$tipped, c("false" = 0, "true" = 1)),
        plrPredProb$true, nPoints = 4000)
```

### Listing 6.2 Random forest tip-prediction model

```{r listing6.2, eval=TRUE, cache=TRUE, dependson="figure6.6, listing6.1"}
rfFit <- train(tipped ~ ., data = numericalDataTrain,
               method = "ranger",
               importance = "impurity",
               trControl = fitControl) 
```

### Figure 6.8 The ROC curve of the nonlinear random forest model. 

```{r figure6.8, eval=TRUE, cache=TRUE, dependson="listing6.2, plotROC"}
rfPredProb <- predict(object=rfFit, 
                       numericalDataTest, type='prob')

plotROC(revalue(numericalDataTest$tipped, c("false" = 0, "true" = 1)),
        rfPredProb$true, nPoints = 4000)
```

### Figure 6.9 The important features of the random forest model.

```{r figure6.9, eval=TRUE, cache=TRUE, dependson="listing6.2"}
rfImp <- varImp(rfFit, scale = FALSE)
setDT(rfImp$importance, keep.rownames = TRUE)[]
rfImp$importance <- 
  rfImp$importance[order(rfImp$importance$Overall,
                         decreasing = TRUE),]
rfImp$importance$rn <- reorder(rfImp$importance$rn, rfImp$importance$Overall)
impDF <- data.frame(Feature=rfImp$importance$rn,
                 Importance=(rfImp$importance$Overall/sum(rfImp$importance$Overall)))
fig6.9 <- tableGrob(head(impDF,11), rows=NULL, theme=tt)
grid.arrange(fig6.9,
             as.table=TRUE)
```

### Listing 6.3 Converting categorical columns to numerical features

```{r listing6.3, eval=TRUE, cache=TRUE, dependson="listing6.1"}
categoryData <- dataJoined[,c(3:5,15)]
dummies <- dummyVars(" ~ .", data = categoryData, fullRank = TRUE, 
                     levelsOnly = FALSE)
catNumeric <- data.frame(predict(dummies, newdata = categoryData))
numCatData <- data.frame(numericalData, catNumeric)
```

### Figure 6.10 The ROC curve and feature importance list of the random forest model with all categorical variables converted to Boolean (0/1) columns, one per category per feature. 

```{r figure6.10a, eval=TRUE, cache=TRUE, dependson="listing6.3"}
numCatDataTrain <- numCatData[ trainIndex,]
numCatDataTest <- numCatData[-trainIndex,]

rfFitNumCatData <- train(tipped ~ ., data = numCatDataTrain,
                         method = "ranger",
                         importance = "impurity", 
                         trControl = fitControl) 

```

```{r figure6.10b, eval=TRUE, cache=TRUE, dependson="figure6.10a, plotROC"}
rfNumCatPredProb <- predict(object=rfFitNumCatData, 
                            numCatDataTest, type='prob')

fig6.10a <- plotROC(revalue(numCatDataTest$tipped, c("false" = 0, "true" = 1)),
        rfNumCatPredProb$true, nPoints = 4000)

rfImp <- varImp(rfFitNumCatData, scale = FALSE)
setDT(rfImp$importance, keep.rownames = TRUE)[]
rfImp$importance <- 
  rfImp$importance[order(rfImp$importance$Overall,
                         decreasing = TRUE),]
rfImp$importance$rn <- reorder(rfImp$importance$rn, rfImp$importance$Overall)
impDF <- data.frame(Feature=rfImp$importance$rn,
                    Importance=(rfImp$importance$Overall/sum(rfImp$importance$Overall)))

fig6.10b <- tableGrob(head(impDF,11), rows=NULL, theme=tt)
# Plot chart and table into one object
grid.arrange(fig6.10a, fig6.10b,
             nrow=1,
             as.table=TRUE,
             widths = c(5,3))
```

### Listing 6.4 Date-time features

```{r listing6.4, eval=TRUE, cache=TRUE, dependson="listing6.3"}
pickupData <- data.frame(pickup_datetime = dataJoined$pickup_datetime) %>%
  mutate(datetime = as.POSIXct(strptime(pickup_datetime, format="%Y-%m-%d %H:%M:%OS", tz="UTC")),
         pickup_hour_of_day = as.numeric(substr(datetime, 12, 13)), 
         pickup_day_of_week = as.integer(as.factor(weekdays(datetime))),
         pickup_week_of_year = week(datetime)
  ) %>%
  select(c(-datetime, -pickup_datetime))

dropoffData <- data.frame(dropoff_datetime = dataJoined$dropoff_datetime) %>%
  mutate(datetime = as.POSIXct(strptime(dropoff_datetime, format="%Y-%m-%d %H:%M:%OS", tz="UTC")),
         dropoff_hour_of_day = as.numeric(substr(datetime, 12, 13)), 
         dropoff_day_of_week = as.integer(as.factor(weekdays(datetime))),
         dropoff_week_of_year = week(datetime)
  ) %>%
  select(c(-datetime, -dropoff_datetime))

numCatTimeData <- data.frame(numCatData, pickupData, dropoffData)
```

### Figure 6.11 The ROC curve and feature importance list for the random forest model, including all categorical features and additional date-time features

```{r figure6.11a, eval=TRUE, cache=TRUE, dependson="listing6.4"}
numCatTimeDataTrain <- numCatTimeData[ trainIndex,]
numCatTimeDataTest <- numCatTimeData[-trainIndex,]

rfFitNumCatTimeData <- train(tipped ~ ., data = numCatTimeDataTrain,
                         method = "ranger",
                         importance = "impurity", 
                         trControl = fitControl) 
```

```{r figure6.11b, eval=TRUE, cache=TRUE, dependson="figure6.11a, plotROC"}
rfNumCatTimePredProb <- predict(object=rfFitNumCatTimeData, 
                            numCatTimeDataTest, type='prob')

fig6.11a <- plotROC(revalue(numCatTimeDataTest$tipped, c("false" = 0, "true" = 1)),
                    rfNumCatTimePredProb$true, nPoints = 4000)

rfImp <- varImp(rfFitNumCatTimeData, scale = FALSE)
setDT(rfImp$importance, keep.rownames = TRUE)[]
rfImp$importance <- 
  rfImp$importance[order(rfImp$importance$Overall,
                         decreasing = TRUE),]
rfImp$importance$rn <- reorder(rfImp$importance$rn, rfImp$importance$Overall)
impDF <- data.frame(Feature=rfImp$importance$rn,
                    Importance=(rfImp$importance$Overall/sum(rfImp$importance$Overall)))

fig6.11b <- tableGrob(head(impDF,11), rows=NULL, theme=tt)
# Plot chart and table into one object
grid.arrange(fig6.11a, fig6.11b,
             nrow=1,
             as.table=TRUE,
             widths = c(5,3))

```
