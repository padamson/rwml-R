---
title: "Real-World Machine Learning"
subtitle: "Chapter 2"
author: "Paul Adamson"
date: "December 7, 2016"
format:
  html:
    toc: true
---

This file contains R code to accompany Chapter 2 of the book 
["Real-World Machine Learning"](https://www.manning.com/books/real-world-machine-learning),
by Henrik Brink, Joseph W. Richards, and Mark Fetherolf.  The code was contributed by
[Paul Adamson](http://github.com/padamson). 

*REMINDER: update `project_dir` below to execute code as interactive code cells*

```{r setup, include=FALSE}
library(knitr)
knitr::opts_chunk$set(echo = TRUE)
project_dir <- file.path(Sys.getenv("HOME"), "projects/github-padamson/rwml-R")
setwd(file.path(project_dir, "R"))
library(tidyverse)
library(gridExtra)
library(vcd)
```

## Listing 2.1 Convert categorical features to numerical binary features

Creating dummy variables in R is extremely easy with the `model.matrix` function.
In the below code, when the `personData` dataframe is created,
the categorical `maritalstatus` variable is of class `factor` with levels `single` and
`married`. Then, a new dataframe is created using the `model.matrix` function to convert the `factor` variable to dummy variables. This approach isn't really needed, though, since [R uses factor vectors to represent dummy and categorical data](https://bookdown.org/carillitony/bailey/chp6.html#dummy-variables-in-r). For more discussion on the topic of factor variables in R, see Amelia McNamara and Nicholas Horton’s paper, [Wrangling categorical data in R](https://peerj.com/preprints/3163/). We will avoid the explicit
use of dummy variables in the remainder of the rwml-R project.

```{r listing2.1}
personData <- data.frame(
  person = 1:2, 
  name = c("Jane Doe", "John Smith"),
  age = c(24, 41),
  income = c(81200, 121000),
  maritalstatus = factor(c("single", "married"), levels=c("single", "married"))
)

kable(personData)
str(personData)

personDataNew <- data.frame(personData[,1:4], 
                         model.matrix(~ maritalstatus - 1, 
                                      data = personData)) 

kable(personDataNew)
str(personDataNew)
```

In the call to `model.matrix`, the −1 in the model formula 
ensures that we create a dummy variable for each of the two marital statuses 
(technically, it suppresses the creation of an intercept). 

```{r}
model.matrix(~ maritalstatus - 1, 
             data = personData)
```

The matrix of dummy variables is then joined to the original dataframe (minus
the maritalstatus column) with another call to `data.frame`.

## Listing 2.2 Simple feature extraction on Titanic cabins

The packages [`dplyr`](https://cran.rstudio.com/web/packages/dplyr) and 
[`tidyr`](https://cran.r-project.org/web/packages/tidyr) from the tidyverse are excellent 
for tidying and preprocessing data, 
including creating new features from existing ones. (Note: `plyr` and
`dplyr` are both loaded as part of the `tidyverse` package.)

```{r listing2.2}
titanic <- read.csv("../data/titanic.csv", 
                    colClasses = c(
                      Survived = "factor",
                      Sex = "factor",
                      Name = "character",
                      Ticket = "character",
                      Cabin = "character")) |>
  mutate(
    Survived = fct_recode(Survived,
      "no"  = "0",
      "yes" = "1"  
    )
  ) |>
  separate(Cabin, into = "firstCabin", sep = " ", extra = "drop", remove = FALSE) |>
  separate(firstCabin, into = c("cabinChar", "cabinNum"), sep = 1) |>
  rowwise() |>
  mutate(numCabins = length(unlist(strsplit(Cabin, " ")))) |>
  ungroup()

str(titanic)
```

In Listing 2.2, `read.csv` is used to read in the comma separated value
(csv) data file. The `colClasses` argument is used to specify the correct
class for some features. The resulting dataframe is then piped to a `fct_recode` function within `mutate` to change the levels
of the `Survived` factor variable so that '0' indicates 'no' and '1'
indicates 'yes'. Two instances of `separate` are used to   
separate single character columns
into multiple columns. In this case, the first use of `separate` creates a new column named `firstCabin` containing the first value in the `Cabin` feature. The second use of `separate` creates a `cabinChar` feature and a `cabinNum` feature for the letter and the number of the first cabin used by the passenger, respectively. `rowwise` is used prior to the final `mutate` step so that the `numCabins` feature contains the total number of cabins used by each passenger. The call to `ungroup` at the end removes the `rowwise` grouping from the dataframe.

## Listing 2.3 Feature normalization

The below code will normalize a feature using the "min-max" method. As
an example, the `Age` feature of the `titanic` dataframe is normalized
and a histogram of the new normalized feature is plotted with
[`ggplot2`](http://docs.ggplot2.org/current/index.html#). The normalization factor
is stored as a custom attribute of the dataframe.

```{r normalize}
normalizeFeatureFactor <- function(data, fMin=-1.0, fMax=1.0){
  dMin = min(na.omit(data))
  dMax = max(na.omit(data))
  factor = (fMax - fMin) / (dMax - dMin)
  factor
}

normalizeFeature <- function(data, fMin=-1.0, fMax=1.0){
  dMin = min(na.omit(data))
  factor = normalizeFeatureFactor(data, fMin, fMax)
  normalized = fMin + (data - dMin)*factor
  normalized
}

titanic$AgeNormalized <- normalizeFeature(titanic$Age)
attr(titanic, "normalizeAgeFactor") <- normalizeFeatureFactor(titanic$Age)
ggplot(data=titanic, aes(AgeNormalized)) +
  geom_histogram()
attributes(titanic)$normalizeAgeFactor
```

## Figure 2.12 Mosaic plot for Titanic data: Gender vs. survival

The ["Visualizing Categorical Data" (`vcd`)](https://cran.r-project.org/web/packages/vcd/vcd.pdf) package 
provides an excellent set of functions for exploring categorical data,
including mosaic plots. Note that the `vcd` package only supports shade-coding cells
with the value of the Pearson residual (compared to the standardized residual that
is used in Figures 2.12 and 2.13).

```{r figure2.12}
mosaic(
  ~ Sex + Survived,
  data = titanic, 
  main = "Mosaic plot for Titanic data: Gender vs. survival",
  shade = TRUE,
  split_vertical = TRUE,
  labeling_args = list(
    set_varnames = c(
      Sex = "Gender",
      Survived = "Survived?")))
```

## Figure 2.13 Mosaic plot for Titanic data: Passenger class vs. survival

```{r figure2.13}
mosaic(
  ~ Pclass + Survived,
  data = titanic, 
  main = "Mosaic plot for Titanic data: Passenger Class vs. survival",
  shade = TRUE,
  split_vertical = TRUE,
  labeling_args = list(
    set_varnames = c(
      Pclass = "Passenger class",
      Survived = "Survived?")))
```

## Figure 2.14 Box plot for Titanic data: Passenger age vs. survival

The `boxplot` function is provided as part of the standard `graphics` package
in R. `ggplot2` provides a much nicer version.
```{r figure2.14a}
boxplot(Age ~ Survived, 
        data = titanic,
        xlab = "Survived?",
        ylab = "Age (years)",
        las = 1)
```

```{r figure2.14b}
ggplot(titanic, aes(Survived, Age)) + 
  geom_boxplot() +
  xlab("Survived?") +
  ylab("Age\n(years)")
```

## Figure 2.15 Box plots for Titanic data: Passenger fare versus survival

Built-in `boxplot` graphics can be combined in rows and columns using the `mfrow` graphical
parameter set via the `par` function. (Try `help(par)` to learn more.) 
```{r figure2.15a}
par(mfrow=c(1,2))
par(mai=c(1,1,.1,.1), las = 1)
boxplot(Fare ~ Survived, 
        data = titanic,
        xlab = "Survived?",
        ylab = "Fare Amount")
boxplot(Fare**(1/2) ~ Survived, 
        data = titanic,
        xlab = "Survived?",
        ylab = "sqr (fare amount)")
```

An alternative approach is to use the `grid.arrange` function from the
`gridExtra` package.

```{r figure2.15b}
bp1 <- ggplot(titanic, aes(Survived, Fare)) + 
  geom_boxplot() +
  xlab("Survived?") +
  ylab("Fare Amount")
bp2 <- ggplot(titanic, aes(Survived, Fare**(1/2))) + 
  geom_boxplot() +
  xlab("Survived?") +
  ylab("sqrt(Fare Amount)")
grid.arrange(bp1, bp2, ncol = 2)
```

## Figure 2.16 Density plot for MPG data, by region

The [`geom_density`](https://ggplot2.tidyverse.org/reference/geom_density.html) function in `ggplot2` is used 
to create density plots. We read the `auto-mpg.csv` data into the `auto` dataframe, specifying the `origin` column as a `factor` variable, and the `modelyear` column as the `integer` type. 
The `fct_recode` function in the call to `mutate` makes the levels 
in the `origin` factor human
readable. Separate density plots are created with different line types and colors for each level in `origin`. 
By passing `NULL` to the `linetype` and `color` arguments in `labs`, 
the legend titles for each are eliminated, allowing them to be combined automatically. (The reader is encouraged to experiment with changing one or both of these arguments.)

```{r figure2.16}
auto <- read.csv("../data/auto-mpg.csv",
    colClasses = c(origin = "factor",
                   modelyear = "integer")) |>
    mutate(origin = fct_recode(origin,
        "USA"    = "1\t", 
        "Europe" = "2\t", 
        "Asia"   = "3\t")
      )

str(auto)

ggplot(auto, aes(mpg)) +
  geom_density(aes(linetype=origin, color=origin)) +
  labs(x="Miles per gallon", y="Density",
       title="Density plot for MPG data, by region",
       linetype=NULL, color=NULL)
```

## Figure 2.17 Scatterplots for MPG data

It doesn't get much simpler than the `plot` function in R.

```{r figure2.17a}
par(mfrow=c(1,2), mai=c(1,1,.1,.1), las = 1)
plot(auto$weight, auto$mpg,
     xlab = "Vehicle weight",
     ylab = "Miles per\ngallon")
plot(auto$modelyear, auto$mpg,
     xlab = "Model year",
     ylab = "Miles per\ngallon")

```

The same plots are generated with `ggplot2` using the `geom_point` function. A little
work is required to get the x-axis tick marks to match those in the book, but the 
end result looks very nice.

```{r figure2.17b}
weight_tickmarks <- seq(1500, 4500, by=1000)
modelyear_tickmarks <- seq(70, 82, by=2)

p1 <- ggplot(auto, aes(weight, mpg)) + 
  geom_point() +
  labs(x="Vehicle weight", y="Miles per gallon") +
  scale_x_continuous(breaks=weight_tickmarks)

p2 <- ggplot(auto, aes(modelyear, mpg)) + 
  geom_point() +
  labs(x="Model year", y="Miles per gallon") +
  scale_x_continuous(breaks=modelyear_tickmarks)

grid.arrange(p1, p2, ncol = 2)
```

The [`facet_grid`](https://ggplot2.tidyverse.org/reference/facet_grid.html) and [`facet_wrap`] methods in `ggplot2` are very useful for creating a matrix or sequence of panels defined by faceting (discrete) variables. As a bonus, we redo the above plots with facets for each value of the `origin` variable.

```{r figure2.17c}
ggplot(auto, aes(weight, mpg)) + 
  geom_point() +
  labs(x="Vehicle weight", y="Miles per gallon") +
  facet_wrap(vars(origin)) +
  scale_x_continuous(breaks=weight_tickmarks)
```

```{r figure2.17d}
ggplot(auto, aes(modelyear, mpg)) + 
  geom_point() +
  labs(x="Model year", y="Miles per gallon") +
  facet_wrap(vars(origin)) +
  scale_x_continuous(breaks=modelyear_tickmarks)
```